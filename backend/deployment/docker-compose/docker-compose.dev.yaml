version: "3.8"
name: "tourister"

services:

    postgres:
        image: postgres:15.4-alpine
        container_name: postgres
        restart: unless-stopped
        environment:
          - POSTGRES_USER=${POSTGRES_USER-}
          - POSTGRES_PASSWORD=${POSTGRES_PASSWORD-}
          - POSTGRES_EXTENSIONS=pg_trgm
        healthcheck:
          test: pg_isready -U postgres
        ports:
          - "5432:5432"
        volumes:
          - postgres:/var/lib/postgresql/data
        networks:
          - tourister-network

    mongo:
        image: mongo:7.0.5 
        container_name: mongo
        restart: unless-stopped
        command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
        healthcheck:
          test: echo "try { rs.status() } 
                catch (err) { 
                  rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) 
                }" | mongosh --port 27017 --quiet
        ports:
          - "27017:27017"
        networks:
          - tourister-network
        volumes:
          - mongo_data:/data/db
          - mongo_config:/data/configdb

    rabbitmq:
        image: rabbitmq:3.12.4-management
        container_name: rabbitmq
        restart: unless-stopped
        healthcheck:
          test: rabbitmq-diagnostics check_port_connectivity
        ports:
          - "5672:5672"
          - "15672:15672"
        networks:
          - tourister-network
    
    jaeger:
        user: root # Required to run as root to access /badger volume.
        image: jaegertracing/all-in-one:1.53
        container_name: jaeger
        restart: unless-stopped
        environment:
          - COLLECTOR_OTLP_ENABLED=true
          - SPAN_STORAGE_TYPE=badger
          - BADGER_EPHEMERAL=false
          - BADGER_DIRECTORY_VALUE=/badger/data
          - BADGER_DIRECTORY_KEY=/badger/key
        ports:
          - "16686:16686"
          - "4317:4317"
          - "4318:4318"
        networks:
          - tourister-network
        volumes:
          - jaeger_data:/badger

    prometheus:
        image: prom/prometheus:v2.49.1
        container_name: prometheus
        restart: unless-stopped
        ports:
          - "9090:9090"
        environment:
          - TZ=UTC
        networks:
          - tourister-network
        volumes:
          - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml

    grafana:
        image: grafana/grafana:10.3.1
        container_name: grafana
        restart: unless-stopped
        ports:
          - "3000:3000"
        networks:
          - tourister-network
        volumes:
          - ./monitoring/grafana-data/data:/var/lib/grafana

    node_exporter:
        image: quay.io/prometheus/node-exporter:v1.7.0
        container_name: node_exporter
        restart: unless-stopped
        command:
          - '--path.rootfs=/host'
        pid: host
        networks:
          - tourister-network
        volumes:
          - '/:/host:ro,rslave'

    cadvisor:
        image: gcr.io/cadvisor/cadvisor:v0.47.2
        container_name: cadvisor
        restart: unless-stopped
        ports:
          - "8080:8080"
        networks:
          - tourister-network
        volumes:
          - /:/rootfs:ro
          - /var/run:/var/run:ro
          - /sys:/sys:ro
          - /var/lib/docker/:/var/lib/docker:ro
          - /dev/disk/:/dev/disk:ro
        devices:
          - /dev/kmsg

    proxy:
        image: ${DOCKER_REGISTRY-}/proxy:local-dev
        build:
          context: ../../
          dockerfile: src/Proxy/Dockerfile.dev
        container_name: proxy
        environment:
          - OTEL_EXPORTER_OTLP_ENDPOINT=${JAEGER_CONNECTION}
        ports:
          - "8000:80"
        networks:
          - tourister-network
        depends_on:
          jaeger:
            condition: service_started

    identity:
        image: ${DOCKER_REGISTRY-}/identity:local-dev
        build:
          context: ../../
          dockerfile: src/Services/Identity/Dockerfile.dev
        container_name: identity
        environment:
          - PG_CONNECTION=${IDENTITY_PG_CONNECTION}
          - RABBITMQ_CONNECTION=${RABBITMQ_CONNECTION}
          - OTEL_EXPORTER_OTLP_ENDPOINT=${JAEGER_CONNECTION}
        ports:
          - "8001:80"
        networks:
          - tourister-network
        depends_on: 
          postgres:
            condition: service_healthy
          rabbitmq:
            condition: service_healthy
          jaeger:
            condition: service_started

    property:
        user: root                                          # TODO: Re-check and try removing "driver: local" from volume definition.
        image: ${DOCKER_REGISTRY-}/property:local-dev
        build:
          context: ../../
          dockerfile: src/Services/Property/Dockerfile.dev
        container_name: property
        environment:
          - PG_CONNECTION=${PROPERTY_PG_CONNECTION}
          - RABBITMQ_CONNECTION=${RABBITMQ_CONNECTION}
          - OTEL_EXPORTER_OTLP_ENDPOINT=${JAEGER_CONNECTION}
        ports:
          - "8006:80"
        networks:
          - tourister-network
        volumes:
          - images:/app/wwwroot/images
        depends_on:
          postgres:
            condition: service_healthy
          rabbitmq:
            condition: service_healthy
          jaeger:
            condition: service_started

    reservation:
        image: ${DOCKER_REGISTRY-}/reservation:local-dev
        build:
          context: ../../
          dockerfile: src/Services/Reservation/Dockerfile.dev
        container_name: reservation
        environment:
          - MONGODB_CONNECTION=${RESERVATION_MONGODB_CONNECTION}
          - RABBITMQ_CONNECTION=${RABBITMQ_CONNECTION}
          - OTEL_EXPORTER_OTLP_ENDPOINT=${JAEGER_CONNECTION}
        ports:
          - "8011:80"
        networks:
          - tourister-network
        depends_on:
          mongo:
            condition: service_healthy
          rabbitmq:
            condition: service_healthy
          jaeger:
            condition: service_started

    user:
        image: ${DOCKER_REGISTRY-}/user:local-dev
        build:
          context: ../../
          dockerfile: src/Services/User/Dockerfile.dev
        container_name: user
        environment:
          - MONGODB_CONNECTION=${USER_MONGODB_CONNECTION}
          - RABBITMQ_CONNECTION=${RABBITMQ_CONNECTION}
          - RESERVATIONS_SERVICE_URL=http://reservation:80
          - OTEL_EXPORTER_OTLP_ENDPOINT=${JAEGER_CONNECTION}
        ports:
          - "8016:80"
        networks:
          - tourister-network
        depends_on:
          mongo:
            condition: service_healthy
          rabbitmq:
            condition: service_healthy
          jaeger:
            condition: service_started

    ui:
        image: ${DOCKER_REGISTRY-}/ui:local-dev
        build:
          context: ../../../frontend
          dockerfile: Dockerfile.dev
        container_name: ui
        ports:
          - "8888:3000"
        volumes:
          - ui:/app

volumes:
  ui:
  postgres:
  mongo_data:
  mongo_config:
  jaeger_data:
  images:
    driver: local

networks:
    tourister-network:
