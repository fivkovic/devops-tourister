name: CI Workflow - UI

on:
  workflow_dispatch:
  push:
    branches: ['main', 'dev']
    paths:
      - frontend/**
      - .github/workflows/ci-ui.yml

  pull_request:
    types: [opened, synchronize, reopened]
    branches: ['main', 'dev']
    paths:
      - frontend/**
      - .github/workflows/ci-ui.yml

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.sha }}
  cancel-in-progress: true

env:
  UI_IMAGE_NAME: 'ui'
  PROJECT_PATH: 'frontend/'
  DOCKERFILE_PATH_DEV: '${{ github.workspace }}/frontend/Dockerfile.dev'
  DOCKERFILE_PATH_PROD: '${{ github.workspace }}/frontend/Dockerfile.prod'
  DOCKER_BUILD_CONTEXT: '${{ github.workspace }}/frontend'
  REGISTRY_REPOSITORY: 'tourister'

jobs:
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    steps:
      - name: 👀 Build Info
        shell: bash
        run: echo "Building UI"

      - name: 🧾 Checkout code
        uses: actions/checkout@v4

      - name: 💽 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 📦 Install dependencies
        if: success()
        shell: bash
        working-directory: ${{ env.PROJECT_PATH }}
        run: npm install

      - name: 🦺 Build the app
        if: success()
        shell: bash
        working-directory: ${{ env.PROJECT_PATH }}
        run: npm run build

  build-publish-artifacts:
    name: 🏗️ Build and Publish Artifacts
    runs-on: ubuntu-latest
    if: ${{ (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main') && github.event_name != 'pull_request' && success() }}
    steps:
      - name: 👀 Build Info
        shell: bash
        run: echo "Building UI"
      
      - name: 🧾 Checkout code
        uses: actions/checkout@v4
      
      - name: 💽 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: 📦 Install dependencies
        if: success()
        shell: bash
        working-directory: ${{ env.PROJECT_PATH }}
        run: npm install
      
      - name: 🦺 Build the app
        if: success()
        shell: bash
        working-directory: ${{ env.PROJECT_PATH }}
        run: npm run build
      
      - name: 📦 Archive artifacts (dev)
        uses: actions/upload-artifact@v4
        if: ${{ github.ref == 'refs/heads/dev' && success() }}
        with:
          name: tourister-ui-latest-dev
          path: ${{ env.PROJECT_PATH }}/dist

      - name: 📦 Archive artifacts (prod)
        uses: actions/upload-artifact@v4
        if: ${{ github.ref == 'refs/heads/main' && success() }}
        with:
          name: tourister-ui-latest-prod
          path: ${{ env.PROJECT_PATH }}/dist

  pre-release:
    name: 📦 Create development release
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/dev' && github.event_name != 'pull_request' && success() }}
    needs: build-publish-artifacts
    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Create development release
        uses: ./.github/actions/pre-release
        with:
          image-name: ${{ env.UI_IMAGE_NAME }}
          dockerfile-path: ${{ env.DOCKERFILE_PATH_DEV }}
          docker-build-context: ${{ env.DOCKER_BUILD_CONTEXT }}
          registry-username: ${{ secrets.DOCKERHUB_USERNAME }}
          registry-password: ${{ secrets.DOCKERHUB_PASSWORD }}
          registry-repository: ${{ env.REGISTRY_REPOSITORY }}
          gh-token: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: 📦 Create stable release
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && success() }}
    needs: build-publish-artifacts
    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Create UI Stable Release
        uses: ./.github/actions/release
        with:
          image-name: ${{ env.UI_IMAGE_NAME }}
          dockerfile-path: ${{ env.DOCKERFILE_PATH_PROD }}
          docker-build-context: ${{ env.DOCKER_BUILD_CONTEXT }}
          registry-username: ${{ secrets.DOCKERHUB_USERNAME }}
          registry-password: ${{ secrets.DOCKERHUB_PASSWORD }}
          registry-repository: ${{ env.REGISTRY_REPOSITORY }}
          gh-token: ${{ secrets.GITHUB_TOKEN }}
