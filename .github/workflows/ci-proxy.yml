name: CI Workflow - Proxy

on:
  workflow_dispatch:
  push:
    branches: ['main', 'dev']
    paths:
      - backend/src/Proxy/**
      - .github/workflows/ci-proxy.yml

  pull_request:
    types: [opened, synchronize, reopened]
    branches: ['main', 'dev']
    paths:
      - backend/src/Proxy/**
      - .github/workflows/ci-proxy.yml

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.sha }}
  cancel-in-progress: true

env:
  PROXY_SERVICE_NAME: 'Proxy'
  PROXY_SERVICE_IMAGE_NAME: 'proxy-api'
  SOLUTION_PATH: 'backend/src'
  PROJECT_PATH: 'backend/src/Proxy/src'
  DOCKERFILE_PATH_DEV: '${{ github.workspace }}/backend/src/Proxy/Dockerfile.dev'
  DOCKERFILE_PATH_PROD: '${{ github.workspace }}/backend/src/Proxy/Dockerfile.prod'
  DOCKER_BUILD_CONTEXT: '${{ github.workspace }}/backend'
  REGISTRY_REPOSITORY: 'tourister'

jobs:
  build-test-analyze:
    name: üèóÔ∏è Build and Run Code Analysis
    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_NOLOGO: true
    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v4

      - name: üèóÔ∏è Build using composite action
        uses: ./.github/actions/build
        if: success()
        with:
          service-name: ${{ env.PROXY_SERVICE_NAME }}
          project-path: ${{ env.PROJECT_PATH }}
          solution-path: ${{ env.SOLUTION_PATH }}

      - name: üö• Run SonarCloud code analysis using composite action
        uses: ./.github/actions/run-code-analysis
        if: success()
        with:
          project-path: ${{ env.PROJECT_PATH }}
          gh-token: ${{ secrets.GITHUB_TOKEN }}
          sonar-token: ${{ secrets.SONAR_TOKEN_PROXY_SERVICE }}
          sonar-organization-key: ${{ vars.SONAR_ORGANIZATION_KEY }}
          sonar-project-key: ${{ vars.SONAR_PROJECT_KEY_PROXY_SERVICE }}
          sonar-project-name: ${{ vars.SONAR_PROJECT_NAME_PROXY_SERVICE }}
          is-test-runner: ${{ vars.IS_TEST_RUNNER }}

  pre-release:
    name: üì¶ Create development release
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/dev' && github.event_name != 'pull_request' && success() }}
    needs: build-test-analyze
    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Create development release
        uses: ./.github/actions/pre-release
        with:
          image-name: ${{ env.PROXY_SERVICE_IMAGE_NAME }}
          dockerfile-path: ${{ env.DOCKERFILE_PATH_DEV }}
          docker-build-context: ${{ env.DOCKER_BUILD_CONTEXT }}
          registry-username: ${{ secrets.DOCKERHUB_USERNAME }}
          registry-password: ${{ secrets.DOCKERHUB_PASSWORD }}
          registry-repository: ${{ env.REGISTRY_REPOSITORY }}
          gh-token: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: üì¶ Create stable release
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && success() }}
    needs: build-test-analyze
    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Create Proxy Stable Release
        uses: ./.github/actions/release
        with:
          image-name: ${{ env.PROXY_SERVICE_IMAGE_NAME }}
          dockerfile-path: ${{ env.DOCKERFILE_PATH_PROD }}
          docker-build-context: ${{ env.DOCKER_BUILD_CONTEXT }}
          registry-username: ${{ secrets.DOCKERHUB_USERNAME }}
          registry-password: ${{ secrets.DOCKERHUB_PASSWORD }}
          registry-repository: ${{ env.REGISTRY_REPOSITORY }}
          gh-token: ${{ secrets.GITHUB_TOKEN }}
